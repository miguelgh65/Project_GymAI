# fitness_chatbot/chains/progress_chain.py
import logging
from typing import Dict, Any, Optional, List
import json
from datetime import datetime

from fitness_chatbot.configs.llm_config import get_llm
from fitness_chatbot.utils.prompt_manager import PromptManager

logger = logging.getLogger("fitness_chatbot")

async def process_query(user_id: str, query: str, user_context: Dict[str, Any] = None) -> str:
    """
    Procesa una consulta sobre progreso y genera un an√°lisis completo.
    
    Args:
        user_id: ID del usuario
        query: Consulta en lenguaje natural
        user_context: Contexto con datos recolectados por otros nodos
        
    Returns:
        Respuesta formateada con an√°lisis de progreso
    """
    logger.info(f"üöÄ ProgressChain procesando: '{query}' para usuario {user_id}")
    
    if not user_context:
        user_context = {}
    
    try:
        # Verificar si tenemos datos suficientes para hacer an√°lisis
        has_exercise_history = "exercise_history" in user_context and user_context["exercise_history"]
        has_fitbit_data = "fitbit_data" in user_context and user_context["fitbit_data"].get("available", False)
        
        logger.info(f"üìä Estado de datos: has_exercise_history={has_exercise_history}, has_fitbit_data={has_fitbit_data}")
        
        if not has_exercise_history and not has_fitbit_data:
            logger.warning("‚ö†Ô∏è No hay datos suficientes para an√°lisis de progreso")
            return "No tengo suficientes datos para analizar tu progreso. Necesito tu historial de ejercicios o datos de Fitbit, pero parece que no pude obtenerlos. Por favor, intenta m√°s tarde o aseg√∫rate de tener datos registrados."
        
        # Detectar ejercicio espec√≠fico en la consulta
        specific_exercise = detect_exercise_in_query(query)
        if specific_exercise:
            user_context["specific_exercise"] = specific_exercise
            logger.info(f"üèãÔ∏è Ejercicio espec√≠fico detectado: {specific_exercise}")
        
        # Formatear contexto para la IA
        logger.info(f"üìù Formateando contexto para el LLM con {len(user_context.get('exercise_history', []))} registros de ejercicios")
        context_text = format_context_for_llm(user_context)
        logger.info(f"üìÑ Contexto formateado (primeros 500 caracteres): {context_text[:500]}...")
        
        # Obtener LLM para an√°lisis
        llm = get_llm()
        if not llm:
            logger.error("‚ùå LLM no disponible para an√°lisis de progreso")
            return "Lo siento, no puedo analizar tu progreso en este momento debido a un problema t√©cnico. Por favor, intenta m√°s tarde."
        
        # Preparar mensajes usando PromptManager
        messages = PromptManager.get_prompt_messages(
            "progress", 
            query=query,
            user_context=context_text
        )
        
        # Configurar el LLM para respuestas m√°s detalladas
        if hasattr(llm, 'with_temperature'):
            llm = llm.with_temperature(0.2)
            
        if hasattr(llm, 'with_max_tokens'):
            llm = llm.with_max_tokens(2048)
        
        # Invocar LLM para an√°lisis
        logger.info("üß† Analizando progreso con IA - enviando prompt al LLM")
        response = await llm.ainvoke(messages)
        analysis = response.content if hasattr(response, 'content') else str(response)
        
        # Verificar si la respuesta es v√°lida
        if not analysis or len(analysis) < 100:
            logger.warning(f"‚ö†Ô∏è Respuesta del LLM demasiado corta o vac√≠a: {analysis}")
            # Proporcionar una respuesta de fallback
            return f"He analizado tus datos de {specific_exercise if specific_exercise else 'entrenamiento'}, pero necesito m√°s informaci√≥n para darte un an√°lisis completo. Por favor, sigue registrando tus entrenamientos regularmente para obtener un mejor an√°lisis."
        
        logger.info(f"‚úÖ An√°lisis generado: {len(analysis)} caracteres")
        logger.info(f"üìä Primeros 200 caracteres del an√°lisis: {analysis[:200]}")
        return analysis
        
    except Exception as e:
        logger.exception(f"‚ùå Error en ProgressChain: {str(e)}")
        return "Lo siento, tuve un problema al analizar tu progreso. Por favor, intenta de nuevo m√°s tarde."

def detect_exercise_in_query(query: str) -> str:
    """
    Detecta si hay alg√∫n ejercicio espec√≠fico mencionado en la consulta.
    
    Args:
        query: Consulta del usuario
        
    Returns:
        Nombre del ejercicio o cadena vac√≠a si no se detecta
    """
    # Lista de ejercicios comunes para detectar
    common_exercises = [
        "press banca", "press de banca", "bench press",
        "sentadilla", "sentadillas", "squat", "squats",
        "peso muerto", "deadlift",
        "dominada", "dominadas", "pull up", "pullup",
        "press militar", "military press",
        "curl biceps", "curl de b√≠ceps", "bicep curl",
        "extensiones", "extensi√≥n", "extension",
        "fondos", "dips",
        "remo", "row"
    ]
    
    # Convertir la consulta a min√∫sculas para facilitar la detecci√≥n
    query_lower = query.lower()
    
    # Buscar coincidencias con ejercicios comunes
    for exercise in common_exercises:
        if exercise in query_lower:
            return exercise
    
    return ""

def format_context_for_llm(context: Dict[str, Any]) -> str:
    """
    Formatea el contexto con los datos recolectados para el an√°lisis de progreso.
    
    Args:
        context: Datos recopilados (exercise_history, fitbit_data, etc.)
        
    Returns:
        Texto formateado para el prompt de IA
    """
    formatted_text = []
    
    # A√±adir datos de historial de ejercicios si est√°n disponibles
    if "exercise_history" in context and context["exercise_history"]:
        formatted_text.append("=== HISTORIAL DE EJERCICIOS ===\n")
        
        exercise_history = context["exercise_history"]
        logger.info(f"üèãÔ∏è Formateando {len(exercise_history)} registros de ejercicios")
        
        # Agrupar ejercicios por tipo
        exercise_groups = {}
        for entry in exercise_history:
            # Verificar la estructura del registro y normalizar
            if isinstance(entry, dict):
                # El formato puede variar seg√∫n la fuente, intentamos normalizarlo
                exercise_name = entry.get('ejercicio', entry.get('exercise', 'desconocido'))
                
                # Asegurarnos de que no sea None
                if exercise_name is None:
                    exercise_name = 'desconocido'
                
                # Normalizar el campo fecha
                fecha = entry.get('fecha')
                if isinstance(fecha, str):
                    # Ya es un string, lo dejamos as√≠
                    pass
                elif hasattr(fecha, 'isoformat'):
                    # Es un objeto datetime, convertirlo a string
                    fecha = fecha.isoformat()
                else:
                    # Si no tenemos fecha v√°lida, usar fecha actual
                    fecha = datetime.now().isoformat()
                
                # Normalizar el campo repeticiones
                repeticiones = entry.get('repeticiones', [])
                if isinstance(repeticiones, str):
                    try:
                        repeticiones = json.loads(repeticiones)
                    except:
                        repeticiones = []
                        
                # Crear entrada normalizada
                normalized_entry = {
                    'ejercicio': exercise_name,
                    'fecha': fecha,
                    'repeticiones': repeticiones
                }
                
                # A√±adir a los grupos
                if exercise_name not in exercise_groups:
                    exercise_groups[exercise_name] = []
                exercise_groups[exercise_name].append(normalized_entry)
            else:
                logger.warning(f"‚ö†Ô∏è Entrada de ejercicio con formato inesperado: {type(entry)}")
        
        # Si hay un ejercicio espec√≠fico en la consulta, priorizarlo
        if "specific_exercise" in context:
            specific_exercise = context["specific_exercise"]
            if specific_exercise in exercise_groups:
                formatted_text.append(f"EJERCICIO ESPEC√çFICO: {specific_exercise}")
                formatted_text.append(f"Total de sesiones: {len(exercise_groups[specific_exercise])}")
                
                # Ordenar por fecha
                sessions = sorted(exercise_groups[specific_exercise], 
                                 key=lambda x: x.get('fecha', ''))
                
                # Mostrar sesiones
                for i, session in enumerate(sessions, 1):
                    fecha = session.get('fecha', 'fecha desconocida')
                    repeticiones = session.get('repeticiones', [])
                    
                    formatted_text.append(f"  Sesi√≥n {i} - Fecha: {fecha}")
                    
                    if repeticiones:
                        if isinstance(repeticiones, list):
                            for j, serie in enumerate(repeticiones, 1):
                                if isinstance(serie, dict):
                                    reps = serie.get('repeticiones', 0)
                                    peso = serie.get('peso', 0)
                                    formatted_text.append(f"    Serie {j}: {reps} repeticiones √ó {peso} kg")
        
        # Mostrar resumen de todos los ejercicios
        formatted_text.append("\nRESUMEN DE EJERCICIOS:")
        for exercise_name, sessions in exercise_groups.items():
            # Si ya mostramos el ejercicio espec√≠fico en detalle, solo un resumen
            if "specific_exercise" in context and exercise_name == context["specific_exercise"]:
                continue
                
            formatted_text.append(f"‚Ä¢ {exercise_name}: {len(sessions)} sesiones")
            
        formatted_text.append("")  # L√≠nea en blanco
    
    # A√±adir datos de Fitbit si est√°n disponibles
    if "fitbit_data" in context and context["fitbit_data"].get("available", False):
        formatted_text.append("=== DATOS DE FITBIT ===\n")
        fitbit_data = context["fitbit_data"]
        
        # Mostrar datos de peso si est√°n disponibles
        if "weight" in fitbit_data:
            weight_entries = fitbit_data["weight"]
            formatted_text.append("REGISTRO DE PESO:")
            for entry in weight_entries:
                date = entry.get("date", "desconocida")
                weight = entry.get("weight", 0)
                formatted_text.append(f"  {date}: {weight} kg")
            
        # Mostrar actividad si est√° disponible
        if "activity_summary" in fitbit_data:
            activity = fitbit_data["activity_summary"]
            formatted_text.append("\nACTIVIDAD F√çSICA:")
            formatted_text.append(f"  Pasos: {activity.get('steps', 0)}")
            formatted_text.append(f"  Calor√≠as: {activity.get('caloriesOut', 0)}")
            
        formatted_text.append("")  # L√≠nea en blanco
    
    # A√±adir instrucciones para an√°lisis avanzado
    formatted_text.append("=== INSTRUCCIONES PARA AN√ÅLISIS ===")
    formatted_text.append("1. Si hay datos de peso y repeticiones, calcula el 1RM (repetici√≥n m√°xima) usando la f√≥rmula de Brzycki:")
    formatted_text.append("   1RM = peso √ó (36 / (37 - repeticiones))")
    formatted_text.append("2. Analiza la tendencia de progreso basada en:")
    formatted_text.append("   - Aumento de peso utilizado")
    formatted_text.append("   - Aumento de repeticiones totales")
    formatted_text.append("   - Aumento de volumen total (peso √ó repeticiones)")
    formatted_text.append("3. Si hay un ejercicio espec√≠fico mencionado, enf√≥cate en √©l")
    formatted_text.append("4. Proporciona recomendaciones espec√≠ficas para mejorar")
    
    # Si no hay datos suficientes
    if len(formatted_text) <= 3:  # Solo t√≠tulos sin contenido
        return "No hay datos suficientes para analizar el progreso."
    
    return "\n".join(formatted_text)