services:
  gym-postgres:
    image: postgres:latest
    container_name: gym-postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      # Volumen persistente para los datos de la BD
      - postgres_data:/var/lib/postgresql/data
      # Monta el script SQL principal para crear tablas
      - ./init-scripts/create-tables.sql:/docker-entrypoint-initdb.d/create-tables.sql
      # Monta los archivos CSV para que el script los cargue
      - ./init-scripts/ingredients_macros.csv:/docker-entrypoint-initdb.d/ingredients_macros.csv
      - ./init-scripts/list_meals.csv:/docker-entrypoint-initdb.d/list_meals.csv
    ports:
      # Expone el puerto 5438 en tu máquina, mapeado al 5432 del contenedor
      - "5438:5432"
    restart: unless-stopped
    networks:
      - gymnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  gym-fastapi-backend:
    container_name: gym-fastapi-backend
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      # ¡IMPORTANTE! Asegúrate que en tu .env DB_HOST=gym-postgres y DB_PORT=5432
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - PYTHONPATH=/app
      - TZ=Europe/Madrid
    volumes:
      # Monta el código para desarrollo (hot-reload si usas uvicorn --reload)
      - .:/app
    ports:
      - "5050:5050"
    depends_on:
      gym-postgres:
        condition: service_healthy
    restart: unless-stopped
    working_dir: /app
    # Comando para iniciar (modificado para quitar SSL en un paso anterior)
    command: >
      sh -c "chmod +x /app/start.sh &&
             sed -i 's/--ssl-keyfile/# --ssl-keyfile/g' /app/start.sh &&
             sed -i 's/--ssl-certfile/# --ssl-certfile/g' /app/start.sh &&
             /app/start.sh"
    networks:
      - gymnet
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:5050/docs > /dev/null || exit 1"] # Usar -f para fallar en error http, exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  gym-react-frontend:
    container_name: gym-react-frontend
    build:
      context: ./front_end_react # Asegúrate que esta ruta sea correcta
      dockerfile: Dockerfile
    ports:
      - "80:80" # Asumiendo que el frontend corre en el puerto 80 (o 3000 si es dev server)
    volumes:
      # Monta el código del frontend y Nginx config
      - ./front_end_react:/app
      - /app/node_modules # Evita sobreescribir node_modules del host
      - ./front_end_react/nginx.conf:/etc/nginx/conf.d/default.conf
    environment:
      # Pasa variables de entorno necesarias para React
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL} # Asegúrate que esté definida en .env
      - REACT_APP_PROJECT_NAME=${REACT_APP_PROJECT_NAME} # Asegúrate que esté definida en .env
      - REACT_APP_GOOGLE_CLIENT_ID=${REACT_APP_GOOGLE_CLIENT_ID} # Asegúrate que esté definida en .env
    depends_on:
      - gym-fastapi-backend
    restart: unless-stopped
    networks:
      - gymnet

networks:
  gymnet:
    driver: bridge

volumes:
  # Define el volumen nombrado para persistencia de la BD
  postgres_data: