# handlers.py
import re
import requests
import telebot
import json
import random
from utils import send_message_split, format_logs, is_user_whitelisted, log_denied_access, log_to_console

# Mantener la URL que funciona con los curls
BASE_URL = "http://localhost:5050"
DEFAULT_USER_ID = "3892415"  # Id por defecto si no viene en el mensaje

def get_chat_id(message):
    """
    Retorna el id del chat si existe; de lo contrario, retorna el id por defecto.
    """
    try:
        return str(message.chat.id)
    except AttributeError:
        return DEFAULT_USER_ID

def register_handlers(bot: telebot.TeleBot):
    # Registra un middleware global para loggear todos los mensajes entrantes
    @bot.middleware_handler(update_types=['message'])
    def log_all_messages(bot_instance, message):
        """Middleware para registrar todos los mensajes entrantes"""
        user_id = get_chat_id(message)
        if hasattr(message, 'text') and message.text:
            log_to_console(f"MENSAJE RECIBIDO - Usuario {user_id}: {message.text}", "INPUT")
    
    def check_whitelist(message):
        chat_id = get_chat_id(message)
        if not is_user_whitelisted(chat_id):
            denied_text = (
                "¬°Oh no, brother! No tienes acceso para levantar en este bot.\n"
                "Ponte en contacto con el admin del bot para que te d√© la autorizaci√≥n.\n"
                "¬°Let's get those gains, baby!"
            )
            bot.send_message(chat_id, denied_text)
            log_denied_access(chat_id, message.text if hasattr(message, 'text') else "Sin texto")
            log_to_console(f"Acceso denegado para {chat_id}", "ACCESS_DENIED")
            return False
        return True

    # Comando /start: Mensaje de bienvenida al estilo Ronnie Coleman.
    @bot.message_handler(commands=["start"])
    def send_welcome(message):
        chat_id = get_chat_id(message)
        if not check_whitelist(message):
            return
        welcome_text = (
            "¬°Yeah buddy! Bienvenido a tu Bot de Gym, donde cada sesi√≥n es 'light weight, baby'!\n"
            "Usa /help para ver los comandos disponibles y saber c√≥mo enviar tus ejercicios."
        )
        bot.send_message(chat_id, welcome_text)
        log_to_console(f"Comando /start - Bienvenida enviada a {chat_id}", "OUTPUT")

    # Comando /help: Muestra los comandos disponibles y c√≥mo enviar ejercicios.
    @bot.message_handler(commands=["help"])
    def send_help(message):
        chat_id = get_chat_id(message)
        if not check_whitelist(message):
            return
        help_text = (
            "¬°Yeah buddy! Aqu√≠ van los comandos:\n"
            "/toca - Ver qu√© ejercicios tocan hoy seg√∫n tu rutina\n"
            "/rutina - Configurar tu rutina semanal\n"
            "/logs  - Consulta los ejercicios de los √∫ltimos 7 d√≠as (por defecto).\n"
            "/logsX - Consulta los ejercicios de los √∫ltimos X d√≠as. Ejemplo: /logs1, /logs2, /logs3, ...\n"
            "/ai - Consulta a tu entrenador personal AI. Ejemplo: /ai ¬øC√≥mo mejorar mi press de banca?\n"
            "\n"
            "Tambi√©n puedes hacer preguntas directamente al Entrenador AI simplemente escribiendo tu pregunta normal.\n"
            "\n"
            "Para enviar tus ejercicios, utiliza este formato:\n"
            "Ejemplo: press banca 10x130,7x130,5x130 dominadas 10,9,5\n"
            "¬°Suelta esas series y registra tu grandeza!"
        )
        bot.send_message(chat_id, help_text)
        log_to_console(f"Comando /help - Mostrando ayuda a {chat_id}", "OUTPUT")

    # Comando /ai: Interact√∫a con el entrenador personal AI
    @bot.message_handler(commands=["ai"])
    def chat_with_ai(message):
        chat_id = get_chat_id(message)
        if not check_whitelist(message):
            return
        
        # Extrae el texto despu√©s del comando
        ai_prompt = message.text.replace('/ai', '', 1).strip()
        
        if not ai_prompt:
            # Si no hay texto, pedir al usuario que proporcione una pregunta
            help_text = (
                "ü§ñ *¬°ENTRENADOR AI EN L√çNEA!* ü§ñ\n\n"
                "Preg√∫ntame sobre tu rutina, nutrici√≥n o entrenamiento.\n\n"
                "*Ejemplo:* /ai Necesito ejercicios para fortalecer los tr√≠ceps\n\n"
                "*¬°LIGHTWEIGHT BABY!*"
            )
            bot.send_message(chat_id, help_text, parse_mode="Markdown")
            return
        
        # Enviar indicador de "escribiendo..."
        bot.send_chat_action(chat_id, "typing")
        log_to_console(f"Enviando pregunta al AI: {ai_prompt}", "PROCESS")
        
        # Llamada a la API del chatbot
        url = f"{BASE_URL}/api/chatbot/send"
        try:
            response = requests.post(
                url,
                json={"user_id": chat_id, "message": ai_prompt},
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success") and data.get("responses"):
                    # Concatenar todas las respuestas en un solo mensaje
                    answer = ""
                    for resp in data["responses"]:
                        answer += resp.get("content", "") + "\n\n"
                    
                    # A√±adir estilo Ronnie Coleman
                    answer = f"ü§ñ *ENTRENADOR AI:* ü§ñ\n\n{answer}\n\n*¬°LIGHTWEIGHT BABY!*"
                    send_message_split(bot, chat_id, answer)
                else:
                    bot.send_message(
                        chat_id, 
                        "ü§ñ El entrenador AI est√° descansando ahora. ¬°Int√©ntalo de nuevo en unos minutos! ü§ñ"
                    )
            else:
                bot.send_message(
                    chat_id, 
                    f"Error al comunicarse con el entrenador AI: {response.status_code}"
                )
        except Exception as e:
            bot.send_message(
                chat_id, 
                "No pude conectar con el entrenador AI. ¬°Los m√∫sculos necesitan descanso a veces!"
            )
            log_to_console(f"Error en comunicaci√≥n con el chatbot: {str(e)}", "ERROR")

    # Comando /logs (sin d√≠gitos): Consulta los ejercicios de los √∫ltimos 7 d√≠as.
    @bot.message_handler(commands=["logs"])
    def send_logs_default(message):
        chat_id = get_chat_id(message)
        if not check_whitelist(message):
            return
        days = 7
        url = f"{BASE_URL}/logs"
        params = {"days": days, "user_id": chat_id}
        
        log_to_console(f"Comando /logs - Usuario {chat_id} solicitando registros de {days} d√≠as", "PROCESS")
        
        try:
            response = requests.get(url, params=params)
            log_to_console(f"API /logs - Respuesta: {response.status_code}", "API")
            
            if response.status_code == 200:
                data = response.json()
                formatted = format_logs(data)
                log_to_console(f"Procesados {len(data)} registros de ejercicios", "PROCESS")
            else:
                formatted = f"Error al obtener los datos: {response.status_code}"
                log_to_console(f"Error en API /logs: {response.status_code} - {response.text}", "ERROR")
        except Exception as e:
            formatted = f"Error al conectar con el servidor: {e}"
            log_to_console(f"Excepci√≥n en /logs: {str(e)}", "ERROR")
        
        send_message_split(bot, chat_id, formatted)
        log_to_console(f"Respuesta enviada a {chat_id} para comando /logs", "OUTPUT")

    # Handler para comandos /logsX, donde X es el n√∫mero de d√≠as.
    @bot.message_handler(regexp=r"^/logs(\d+)$")
    def send_logs_days(message):
        chat_id = get_chat_id(message)
        if not check_whitelist(message):
            return
        match = re.match(r"^/logs(\d+)$", message.text)
        if match:
            days = int(match.group(1))
            url = f"{BASE_URL}/logs"
            params = {"days": days, "user_id": chat_id}
            
            log_to_console(f"Comando /logs{days} - Usuario {chat_id} solicitando registros de {days} d√≠as", "PROCESS")
            
            try:
                response = requests.get(url, params=params)
                log_to_console(f"API /logs - Respuesta: {response.status_code}", "API")
                
                if response.status_code == 200:
                    data = response.json()
                    formatted = format_logs(data)
                    log_to_console(f"Procesados {len(data)} registros de ejercicios", "PROCESS")
                else:
                    formatted = f"Error al obtener los datos: {response.status_code}"
                    log_to_console(f"Error en API /logs: {response.status_code} - {response.text}", "ERROR")
            except Exception as e:
                formatted = f"Error al conectar con el servidor: {e}"
                log_to_console(f"Excepci√≥n en /logs{days}: {str(e)}", "ERROR")
            
            send_message_split(bot, chat_id, formatted)
            log_to_console(f"Respuesta enviada a {chat_id} para comando /logs{days}", "OUTPUT")

    # Comando /toca: Muestra los ejercicios programados para hoy
    @bot.message_handler(commands=["toca"])
    def send_todays_workout(message):
        chat_id = get_chat_id(message)
        if not check_whitelist(message):
            return
        
        url = f"{BASE_URL}/rutina_hoy?format=json"  # A√±adir format=json
        params = {"user_id": chat_id}  # A√±adir user_id como par√°metro
        
        log_to_console(f"Comando /toca - Usuario {chat_id} solicitando rutina de hoy", "PROCESS")
        
        try:
            # Usar el formato exacto que funciona en curl
            response = requests.get(url, params=params)
            log_to_console(f"API /rutina_hoy - Respuesta: {response.status_code}", "API")
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success") and data.get("rutina"):
                    # Formato motivacional estilo Ronnie Coleman
                    formatted = f"üèãÔ∏è‚Äç‚ôÇÔ∏è *¬°YEAH BUDDY! HOY ES {data['dia_nombre'].upper()}* üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
                    formatted += "¬°AIN'T NOTHING BUT A PEANUT! ESTO ES LO QUE TIENES QUE LEVANTAR HOY:\n\n"
                    
                    # Lista de ejercicios
                    for i, ejercicio in enumerate(data["rutina"], 1):
                        status = "‚úÖ" if ejercicio.get("realizado") else "‚è±Ô∏è"
                        formatted += f"{status} *{ejercicio['ejercicio'].upper()}*\n"
                    
                    # Mensaje motivacional para registrar
                    formatted += "\nüí™ *¬°LIGHTWEIGHT BABY!* üí™\n"
                    formatted += "\nRELLENA TUS SERIES Y RESPONDE CON ESTE MENSAJE:\n"
                    
                    # Proporcionar plantilla para rellenar
                    for ejercicio in data["rutina"]:
                        if not ejercicio.get("realizado"):
                            formatted += f"{ejercicio['ejercicio']}: \n"
                    
                    formatted += "\nEjemplo: Dominadas: 10,8,6\n"
                    formatted += "\n*¬°EVERYBODY WANNA BE A BODYBUILDER, BUT DON'T NOBODY WANNA LIFT NO HEAVY WEIGHT!*"
                else:
                    formatted = "üèãÔ∏è‚Äç‚ôÇÔ∏è *¬°LIGHTWEIGHT BABY!* üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
                    formatted += "No hay rutina definida para hoy.\n"
                    formatted += "\nConfigura tu rutina con el comando /rutina\n"
                    formatted += "\n*¬°NO PAIN, NO GAIN!*"
            else:
                formatted = f"Error al obtener la rutina: {response.status_code}"
                log_to_console(f"Error en API /rutina_hoy: {response.status_code} - {response.text}", "ERROR")
        except Exception as e:
            formatted = f"Error al conectar con el servidor: {e}"
            log_to_console(f"Excepci√≥n en /toca: {str(e)}", "ERROR")
        
        # Env√≠a el mensaje con formato Markdown para destacar texto
        bot.send_message(chat_id, formatted, parse_mode="Markdown")
        log_to_console(f"Respuesta enviada a {chat_id} para comando /toca", "OUTPUT")

    # Comando /rutina: Permite configurar la rutina semanal
    @bot.message_handler(commands=["rutina"])
    def config_routine(message):
        chat_id = get_chat_id(message)
        if not check_whitelist(message):
            return
        
        # Obtener la rutina actual
        url = f"{BASE_URL}/rutina?format=json"
        params = {"user_id": chat_id}
        
        log_to_console(f"Comando /rutina - Usuario {chat_id} solicitando configuraci√≥n de rutina", "PROCESS")
        
        try:
            # Usar el formato exacto que funciona en curl
            response = requests.get(url, params=params)
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success") and data.get("rutina"):
                    # Mostrar la rutina actual
                    formatted = "üèãÔ∏è‚Äç‚ôÇÔ∏è *¬°LIGHT WEIGHT BABY! TU RUTINA ACTUAL* üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
                    
                    weekdays = [
                        {"id": 1, "name": "Lunes"},
                        {"id": 2, "name": "Martes"},
                        {"id": 3, "name": "Mi√©rcoles"},
                        {"id": 4, "name": "Jueves"},
                        {"id": 5, "name": "Viernes"},
                        {"id": 6, "name": "S√°bado"},
                        {"id": 7, "name": "Domingo"}
                    ]
                    
                    for day in weekdays:
                        day_id = str(day["id"])
                        formatted += f"*{day['name']}*: "
                        
                        if day_id in data["rutina"] and data["rutina"][day_id]:
                            exercises = ", ".join(data["rutina"][day_id])
                            formatted += exercises
                        else:
                            formatted += "Descanso"
                        
                        formatted += "\n"
                    
                    # Instrucciones para configurar
                    formatted += "\nüí™ *PARA CONFIGURAR UN D√çA*: Env√≠a un mensaje con el formato:\n"
                    formatted += "```\nD√≠a: ejercicio1, ejercicio2, ...\n```\n"
                    formatted += "Ejemplo: Lunes: Press Banca, Dominadas, Triceps\n\n"
                    formatted += "*EVERYBODY WANNA BE A BODYBUILDER, BUT DON'T NOBODY WANNA LIFT NO HEAVY WEIGHT!*"
                else:
                    # No hay rutina configurada, mostrar instrucciones
                    formatted = "üèãÔ∏è‚Äç‚ôÇÔ∏è *¬°NO PAIN NO GAIN! CONFIGURA TU RUTINA* üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
                    formatted += "No tienes una rutina configurada a√∫n. Para configurar, env√≠a un mensaje con el formato:\n"
                    formatted += "```\nD√≠a: ejercicio1, ejercicio2, ...\n```\n"
                    formatted += "Ejemplo: Lunes: Press Banca, Dominadas, Triceps\n\n"
                    formatted += "*¬°LIGHTWEIGHT BABY!*"
            else:
                formatted = f"Error al obtener la rutina: {response.status_code}"
                log_to_console(f"Error en API /rutina: {response.status_code} - {response.text}", "ERROR")
        except Exception as e:
            formatted = f"Error al conectar con el servidor: {e}"
            log_to_console(f"Excepci√≥n en /rutina: {str(e)}", "ERROR")
        
        # Env√≠a el mensaje con formato Markdown
        bot.send_message(chat_id, formatted, parse_mode="Markdown")
        log_to_console(f"Respuesta enviada a {chat_id} para comando /rutina", "OUTPUT")

    # Handler para configurar rutina por d√≠a
    # Handler para configurar rutina por d√≠a
    @bot.message_handler(regexp=r"^(Lunes|Martes|Mi√©rcoles|Jueves|Viernes|S√°bado|Domingo):\s*(.+)$")
    def set_routine_day(message):
        chat_id = get_chat_id(message)
        if not check_whitelist(message):
            return
        
        match = re.match(r"^(Lunes|Martes|Mi√©rcoles|Jueves|Viernes|S√°bado|Domingo):\s*(.+)$", message.text, re.IGNORECASE)
        if match:
            day_name = match.group(1).capitalize()
            exercises_text = match.group(2).strip()
            
            # Mapeo de nombres a n√∫meros
            day_map = {
                "Lunes": 1,
                "Martes": 2,
                "Mi√©rcoles": 3,
                "Jueves": 4,
                "Viernes": 5,
                "S√°bado": 6,
                "Domingo": 7
            }
            
            day_number = day_map.get(day_name)
            if not day_number:
                bot.send_message(chat_id, "¬°ERROR! D√≠a no reconocido. Usa: Lunes, Martes, Mi√©rcoles, Jueves, Viernes, S√°bado o Domingo.")
                return
            
            # Dividir los ejercicios por comas
            exercises = [e.strip() for e in exercises_text.split(",") if e.strip()]
            
            if not exercises:
                bot.send_message(chat_id, "¬°ERROR! No se encontraron ejercicios v√°lidos. Aseg√∫rate de separar los ejercicios con comas.")
                return
            
            # Obtener la rutina actual
            url = f"{BASE_URL}/rutina"
            
            try:
                log_to_console(f"Intentando obtener rutina actual para usuario {chat_id}...", "INFO")
                
                # Enviar mensaje para que el usuario sepa que estamos procesando
                bot.send_chat_action(chat_id, "typing")
                
                # Primero obtenemos la rutina actual
                response = requests.get(url, params={"user_id": chat_id})
                
                log_to_console(f"Respuesta del servidor: Status {response.status_code}", "DEBUG")
                
                if response.status_code == 200:
                    try:
                        # Intentar decodificar la respuesta JSON
                        raw_text = response.text
                        log_to_console(f"Texto de respuesta: {raw_text[:100]}...", "DEBUG")  # Logueamos los primeros 100 caracteres para debug
                        
                        if not raw_text or raw_text.isspace():
                            log_to_console("Respuesta vac√≠a recibida del servidor", "ERROR")
                            current_routine = {}
                        else:
                            data = response.json()
                            current_routine = data.get("rutina", {})
                            
                            # Si rutina no existe o es None, inicializarla como un diccionario vac√≠o
                            if current_routine is None:
                                current_routine = {}
                        
                        # Actualizar solo el d√≠a especificado
                        current_routine[str(day_number)] = exercises
                        
                        # Enviar la rutina actualizada
                        payload = {"rutina": current_routine, "user_id": chat_id}
                        log_to_console(f"Enviando payload: {json.dumps(payload)}", "INFO")
                        
                        update_response = requests.post(
                            url,
                            json=payload,
                            headers={"Content-Type": "application/json"}
                        )
                        
                        log_to_console(f"Respuesta de actualizaci√≥n: {update_response.status_code}", "DEBUG")
                        
                        if update_response.status_code == 200:
                            # √âxito al actualizar
                            bot.send_message(
                                chat_id, 
                                f"üèãÔ∏è‚Äç‚ôÇÔ∏è *¬°YEAH BUDDY!* üèãÔ∏è‚Äç‚ôÇÔ∏è\n\nRutina de *{day_name}* actualizada con √©xito!\n\n"
                                f"Ejercicios configurados: {', '.join(exercises)}\n\n"
                                "*¬°LIGHTWEIGHT, BABY!*", 
                                parse_mode="Markdown"
                            )
                            log_to_console(f"Rutina actualizada para {chat_id}, d√≠a {day_name}", "SUCCESS")
                        else:
                            # Error al actualizar
                            error_msg = f"Error al actualizar la rutina: {update_response.status_code}"
                            try:
                                error_detail = update_response.json().get("message", "No hay detalles adicionales")
                                error_msg += f"\n{error_detail}"
                            except:
                                error_msg += "\nNo se pudo obtener detalles del error"
                            
                            bot.send_message(chat_id, error_msg)
                            log_to_console(error_msg, "ERROR")
                    
                    except json.JSONDecodeError as e:
                        # Error espec√≠fico al decodificar JSON
                        log_to_console(f"Error al decodificar JSON: {e}. Respuesta: {response.text[:200]}", "ERROR")
                        
                        # Intentar crear una rutina desde cero
                        current_routine = {}
                        current_routine[str(day_number)] = exercises
                        
                        # Intentar enviar la rutina nueva
                        payload = {"rutina": current_routine, "user_id": chat_id}
                        log_to_console(f"Intentando crear nueva rutina: {json.dumps(payload)}", "INFO")
                        
                        try:
                            update_response = requests.post(
                                url,
                                json=payload,
                                headers={"Content-Type": "application/json"}
                            )
                            
                            if update_response.status_code == 200:
                                bot.send_message(
                                    chat_id, 
                                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è *¬°YEAH BUDDY!* üèãÔ∏è‚Äç‚ôÇÔ∏è\n\nRutina de *{day_name}* creada con √©xito!\n\n"
                                    "*¬°LIGHTWEIGHT, BABY!*", 
                                    parse_mode="Markdown"
                                )
                            else:
                                bot.send_message(
                                    chat_id, 
                                    f"Error al crear la rutina. Por favor, int√©ntalo de nuevo m√°s tarde."
                                )
                        except Exception as inner_e:
                            bot.send_message(
                                chat_id, 
                                f"Error al procesar la rutina. Int√©ntalo de nuevo m√°s tarde."
                            )
                            log_to_console(f"Error al crear rutina: {str(inner_e)}", "ERROR")
                else:
                    # Error en la solicitud inicial
                    bot.send_message(
                        chat_id, 
                        f"Error al obtener la rutina actual: {response.status_code}. Por favor, int√©ntalo de nuevo m√°s tarde."
                    )
                    log_to_console(f"Error HTTP {response.status_code} al obtener rutina", "ERROR")
            
            except Exception as e:
                # Error general (probablemente de red)
                bot.send_message(
                    chat_id, 
                    f"Error al conectar con el servidor. Por favor, int√©ntalo de nuevo m√°s tarde."
                )
                log_to_console(f"Excepci√≥n al configurar rutina: {str(e)}", "ERROR")
    # Handler para mensajes de texto no comando
    @bot.message_handler(func=lambda message: not message.text.startswith("/"))
    def process_text_message(message):
        chat_id = get_chat_id(message)
        if not check_whitelist(message):
            return
        
        # Analizar el mensaje para determinar si es un registro de ejercicio o una pregunta
        text = message.text.lower()
        
        # Patrones que indican que es un registro de ejercicio
        exercise_patterns = [
            r'\d+x\d+',        # Patr√≥n de "repeticionesx1peso" (ej: 5x75)
            r'press banca|dominadas|sentadillas|curl|press militar',  # Nombres comunes de ejercicios
            r'\b\d+,\s*\d+\b'  # Series separadas por comas (ej: 10, 8, 6)
        ]
        
        is_exercise = any(re.search(pattern, text, re.IGNORECASE) for pattern in exercise_patterns)
        
        if is_exercise:
            # Procesar como registro de ejercicio
            # Mostrar "escribiendo..." mientras se procesa
            bot.send_chat_action(chat_id, "typing")
            
            # Usar multipart/form-data como en el curl
            data = {"exercise_data": message.text, "user_id": chat_id}
            
            log_to_console(f"Ejercicio recibido - Usuario {chat_id}: {message.text}", "PROCESS")
            
            try:
                # Enviar en el formato exacto que funciona con curl
                response = requests.post(BASE_URL, data=data)
                log_to_console(f"API env√≠o ejercicio - Respuesta: {response.status_code}", "API")
                
                # Generar una respuesta motivacional aleatoria estilo Ronnie Coleman
                ronnie_quotes = [
                    "¬°YEAH BUDDY! ¬°LIGHTWEIGHT BABY! Tu entrenamiento ha sido registrado. ¬°HOO! ¬°EVERYBODY WANNA BE A BODYBUILDER!",
                    "¬°BOOOM! ¬°EJERCICIO REGISTRADO! ¬°AIN'T NOTHIN' BUT A PEANUT!",
                    "¬°WHOOOOOO! ¬°REGISTRO COMPLETADO! ¬°ESO ES TODO LO QUE TIENES, BABY! ¬°LIGHTWEIGHT!",
                    "¬°YEAH BUDDY! ¬°BRUTAL! Ejercicio registrado. ¬°LIGHTWEIGHT, BABY, LIGHTWEIGHT!",
                    "¬°ESO ES! ¬°Ejercicio registrado! ¬°NADIE QUIERE LEVANTAR ESTE PESO PESADO PERO YO S√ç!",
                    "¬°REGISTRO EXITOSO! ¬°HOO! ¬°EVERYBODY WANTS TO BE A BODYBUILDER, BUT NOBODY WANTS TO LIFT NO HEAVY WEIGHT!",
                    "¬°TIME TO BLEED! ¬°Ejercicio registrado! ¬°NO PAIN, NO GAIN!",
                    "¬°BOOM! ¬°HICISTE ESO! ¬°Ejercicio registrado! ¬°NO EXCUSES, ONLY RESULTS!",
                    "¬°OOOH YEAH! ¬°ERES UNA M√ÅQUINA! ¬°Ejercicio registrado! ¬°LIGHTWEIGHT BABY!",
                    "¬°YEP YEP! ¬°Ejercicio registrado! ¬°NOTHING TO IT BUT TO DO IT!"
                ]
                
                # Frases para errores
                error_quotes = [
                    "¬°WHOOPS! ¬°ESO FUE M√ÅS PESADO DE LO ESPERADO! Error al registrar. ¬°VAMOS A INTENTARLO DE NUEVO, BABY!",
                    "¬°OOOH! ¬°PARECE QUE NECESITAMOS M√ÅS FUERZA PARA ESTE REGISTRO! Error al conectar con el servidor.",
                    "¬°UH OH! ¬°ESTE PESO SE RESISTE! No se pudo registrar tu ejercicio. ¬°VAMOS DE NUEVO!",
                    "¬°EVERYBODY WANTS TO REGISTER, BUT SOMETIMES THE SERVER SAYS NO! Error en la conexi√≥n. ¬°NO TE RINDAS!",
                    "¬°AIN'T NOTHING BUT A SERVER ERROR, BABY! Intent√©moslo de nuevo. ¬°LIGHTWEIGHT!"
                ]
                
                ronnie_quote = random.choice(ronnie_quotes)
                error_quote = random.choice(error_quotes)
                
                if response.status_code == 200:
                    bot.send_message(
                        chat_id, 
                        f"üèãÔ∏è‚Äç‚ôÇÔ∏è *{ronnie_quote}* üèãÔ∏è‚Äç‚ôÇÔ∏è",
                        parse_mode="Markdown"
                    )
                    
                    # Sugerir pr√≥ximas acciones
                    keyboard = telebot.types.InlineKeyboardMarkup()
                    keyboard.add(
                        telebot.types.InlineKeyboardButton("Ver mi rutina de hoy", callback_data="cmd_toca"),
                        telebot.types.InlineKeyboardButton("Ver mis logs", callback_data="cmd_logs")
                    )
                    keyboard.add(
                        telebot.types.InlineKeyboardButton("Consultar al AI", callback_data="cmd_ai")
                    )
                    
                    bot.send_message(
                        chat_id,
                        "¬øQu√© quieres hacer ahora?",
                        reply_markup=keyboard
                    )
                    
                    log_to_console(f"Ejercicio registrado correctamente para usuario {chat_id}", "SUCCESS")
                else:
                    bot.send_message(
                        chat_id, 
                        f"üèãÔ∏è‚Äç‚ôÇÔ∏è *{error_quote}* üèãÔ∏è‚Äç‚ôÇÔ∏è\n\nC√≥digo: {response.status_code}",
                        parse_mode="Markdown"
                    )
                    log_to_console(f"Error al registrar ejercicio: {response.status_code} - {response.text}", "ERROR")
            except Exception as e:
                error_msg = f"Error al enviar el ejercicio: {str(e)}"
                bot.send_message(
                    chat_id, 
                    f"üèãÔ∏è‚Äç‚ôÇÔ∏è *{random.choice(error_quotes)}* üèãÔ∏è‚Äç‚ôÇÔ∏è",
                    parse_mode="Markdown"
                )
                log_to_console(error_msg, "ERROR")
        else:
            # Procesar como pregunta para el AI
            # Mostrar "escribiendo..." mientras se procesa
            bot.send_chat_action(chat_id, "typing")
            
            log_to_console(f"Pregunta recibida - Usuario {chat_id}: {message.text}", "PROCESS")
            
            # Llamada a la API del chatbot
            url = f"{BASE_URL}/api/chatbot/send"
            try:
                response = requests.post(
                    url,
                    json={"user_id": chat_id, "message": message.text},
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success") and data.get("responses"):
                        # Concatenar todas las respuestas en un solo mensaje
                        answer = ""
                        for resp in data["responses"]:
                            answer += resp.get("content", "") + "\n\n"
                        
                        # A√±adir estilo Ronnie Coleman
                        answer = f"ü§ñ *ENTRENADOR AI:* ü§ñ\n\n{answer}\n\n*¬°LIGHTWEIGHT BABY!*"
                        send_message_split(bot, chat_id, answer)
                    else:
                        bot.send_message(
                            chat_id, 
                            "ü§ñ El entrenador AI est√° descansando ahora. ¬°Int√©ntalo de nuevo en unos minutos! ü§ñ"
                        )
                else:
                    bot.send_message(
                        chat_id, 
                        f"Error al comunicarse con el entrenador AI: {response.status_code}"
                    )
            except Exception as e:
                bot.send_message(
                    chat_id, 
                    "No pude conectar con el entrenador AI. ¬°Los m√∫sculos necesitan descanso a veces!"
                )
                log_to_console(f"Error en comunicaci√≥n con el chatbot: {str(e)}", "ERROR")

    # Manejar los botones inline
    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback_query(call):
        chat_id = str(call.message.chat.id)
        
        # Verificar si el usuario est√° en la lista blanca
        if not is_user_whitelisted(chat_id):
            bot.answer_callback_query(call.id, "No tienes acceso a esta funci√≥n")
            return
        
        if call.data == "cmd_toca":
            # Responder al callback y luego enviar comando directamente
            bot.answer_callback_query(call.id, "Obteniendo tu rutina de hoy...")
            
            # En lugar de crear un mensaje simulado, enviar directamente la respuesta
            url = f"{BASE_URL}/rutina_hoy?format=json"
            params = {"user_id": chat_id}
            
            try:
                response = requests.get(url, params=params)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success") and data.get("rutina"):
                        # Mismo formato que en send_todays_workout
                        formatted = f"üèãÔ∏è‚Äç‚ôÇÔ∏è *¬°YEAH BUDDY! HOY ES {data['dia_nombre'].upper()}* üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
                        formatted += "¬°AIN'T NOTHING BUT A PEANUT! ESTO ES LO QUE TIENES QUE LEVANTAR HOY:\n\n"
                        
                        for i, ejercicio in enumerate(data["rutina"], 1):
                            status = "‚úÖ" if ejercicio.get("realizado") else "‚è±Ô∏è"
                            formatted += f"{status} *{ejercicio['ejercicio'].upper()}*\n"
                        
                        formatted += "\nüí™ *¬°LIGHTWEIGHT BABY!* üí™\n"
                        formatted += "\nRELLENA TUS SERIES Y RESPONDE CON ESTE MENSAJE:\n"
                        
                        for ejercicio in data["rutina"]:
                            if not ejercicio.get("realizado"):
                                formatted += f"{ejercicio['ejercicio']}: \n"
                        
                        formatted += "\nEjemplo: Dominadas: 10,8,6\n"
                        formatted += "\n*¬°EVERYBODY WANNA BE A BODYBUILDER, BUT DON'T NOBODY WANNA LIFT NO HEAVY WEIGHT!*"
                    else:
                        formatted = "üèãÔ∏è‚Äç‚ôÇÔ∏è *¬°LIGHTWEIGHT BABY!* üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
                        formatted += "No hay rutina definida para hoy.\n"
                        formatted += "\nConfigura tu rutina con el comando /rutina\n"
                        formatted += "\n*¬°NO PAIN, NO GAIN!*"
                    
                    bot.send_message(chat_id, formatted, parse_mode="Markdown")
                else:
                    bot.send_message(chat_id, f"Error al obtener la rutina: {response.status_code}")
            except Exception as e:
                bot.send_message(chat_id, f"Error al conectar con el servidor: {e}")
            
        elif call.data == "cmd_logs":
            # Responder al callback y luego enviar logs
            bot.answer_callback_query(call.id, "Obteniendo tus logs...")
            
            days = 7
            url = f"{BASE_URL}/logs"
            params = {"days": days, "user_id": chat_id}
            
            try:
                response = requests.get(url, params=params)
                
                if response.status_code == 200:
                    data = response.json()
                    formatted = format_logs(data)
                else:
                    formatted = f"Error al obtener los datos: {response.status_code}"
                
                send_message_split(bot, chat_id, formatted)
            except Exception as e:
                bot.send_message(chat_id, f"Error al conectar con el servidor: {e}")
            
        elif call.data == "cmd_ai":
            # Invitar a usar el comando /ai
            bot.answer_callback_query(call.id, "Activando el asistente AI...")
            bot.send_message(
                chat_id,
                "ü§ñ *¬°ENTRENADOR AI EN L√çNEA!* ü§ñ\n\n"
                "Usa el comando /ai seguido de tu pregunta:\n\n"
                "Ejemplo: /ai Recomi√©ndame ejercicios para b√≠ceps\n\n"
                "*¬°LIGHTWEIGHT BABY!*",
                parse_mode="Markdown"
            )

    # A√±adir a handlers.py en telegram/gym

    # Comando /vincular
    @bot.message_handler(commands=["vincular"])
    def link_account_command(message):
        chat_id = get_chat_id(message)
        if not check_whitelist(message):
            return
        
        bot.send_message(
            chat_id, 
            "üîó *Vincular con cuenta web*\n\n"
            "Por favor, env√≠a el c√≥digo de vinculaci√≥n que ves en la web.\n"
            "El c√≥digo debe ser de 6 caracteres (letras y n√∫meros).",
            parse_mode="Markdown"
        )
        
        # Registrar el siguiente paso para procesar el c√≥digo
        bot.register_next_step_handler(message, process_link_code)

    def process_link_code(message):
        chat_id = get_chat_id(message)
        if not check_whitelist(message):
            return
        
        code = message.text.strip().upper()
        telegram_id = str(chat_id)
        
        # Validar formato del c√≥digo (6 caracteres alfanum√©ricos)
        if not re.match(r'^[A-Z0-9]{6}$', code):
            bot.send_message(
                chat_id, 
                "‚ùå El c√≥digo debe ser de 6 caracteres (letras y n√∫meros).\n"
                "Por favor, intenta de nuevo con /vincular"
            )
            return
        
        # Enviar mensaje de "procesando"
        bot.send_chat_action(chat_id, "typing")
        
        # Llamar a la API para verificar el c√≥digo
        url = f"{BASE_URL}/api/verify-link-code"
        try:
            response = requests.post(
                url, 
                json={"code": code, "telegram_id": telegram_id},
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    bot.send_message(
                        chat_id, 
                        "‚úÖ *¬°Cuentas vinculadas con √©xito!*\n\n"
                        "Ahora puedes acceder a tus datos desde la web y desde Telegram.\n"
                        "Tus entrenamientos se sincronizar√°n autom√°ticamente entre ambas plataformas.",
                        parse_mode="Markdown"
                    )
                else:
                    bot.send_message(
                        chat_id, 
                        f"‚ùå Error: {data.get('message', 'C√≥digo inv√°lido o expirado')}.\n"
                        "Por favor, genera un nuevo c√≥digo en la web e int√©ntalo de nuevo con /vincular"
                    )
            else:
                bot.send_message(
                    chat_id,
                    "‚ùå Error al verificar el c√≥digo. Por favor, intenta nuevamente."
                )
        except Exception as e:
            bot.send_message(
                chat_id,
                "‚ùå Error al conectar con el servidor. Por favor, intenta m√°s tarde."
            )
            log_to_console(f"Error en verificaci√≥n de c√≥digo: {str(e)}", "ERROR")