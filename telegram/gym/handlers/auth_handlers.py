# telegram/gym/handlers/auth_handlers.py
import re

import requests
from config import BASE_URL, WHITELIST_PATH # Import WHITELIST_PATH if needed elsewhere, or remove if unused
from telebot.types import Message
from .base_handlers import (
    check_whitelist,
    log_to_console,
    get_telegram_id # Correct import already present
)



def register_auth_handlers(bot):
    """
    Registra los handlers relacionados con autenticaci√≥n y vinculaci√≥n de cuentas.

    Args:
        bot: Instancia del bot de Telegram
    """
    @bot.message_handler(commands=["debug"])
    def debug_info(message: Message) -> None:
        chat_id = message.chat.id
        username = message.from_user.username if message.from_user else "N/A"

        # You might need to import WHITELIST_PATH in this function's scope or pass it if needed
        # For simplicity, assuming WHITELIST_PATH is accessible or defined globally in this file/module if used.
        # Example: from config import WHITELIST_PATH if not imported at the top
        try:
            with open(WHITELIST_PATH, 'r') as f:
                whitelist_content = f.read().strip()
        except FileNotFoundError:
            whitelist_content = "Whitelist file not found."
        except Exception as e:
            whitelist_content = f"Error reading whitelist: {e}"


        debug_text = (
            f"ü§ñ Debug Information:\n"
            f"Chat ID: `{chat_id}`\n"
            f"Username: @{username}\n"
            f"First Name: {message.from_user.first_name if message.from_user else 'N/A'}\n"
            f"Last Name: {message.from_user.last_name if message.from_user else 'N/A'}\n"
            f"Whitelist contents: {whitelist_content}" # Display content read from file
        )
        bot.send_message(chat_id, debug_text, parse_mode="Markdown")

    # --- Comando /start: Mensaje de bienvenida al estilo Ronnie Coleman.
    @bot.message_handler(commands=["start"])
    def send_welcome(message: Message) -> None:
        print("üîî COMANDO /start RECIBIDO") # A√±ade este print directo
        # Uses the correctly imported get_telegram_id
        chat_id = get_telegram_id(message)
        print(f"Chat ID: {chat_id}") # A√±ade este print
        log_to_console(f"Comando /start recibido de usuario {chat_id}", "INPUT")

        if not check_whitelist(message, bot):
            print(f"‚ùå Usuario {chat_id} no est√° en whitelist") # A√±ade este print
            return

        welcome_text = (
            "¬°Yeah buddy! Bienvenido a tu Bot de Gym, donde cada sesi√≥n es 'light weight, baby'!\n"
            "Usa /help para ver los comandos disponibles y saber c√≥mo enviar tus ejercicios."
        )
        bot.send_message(chat_id, welcome_text)
        log_to_console(f"Comando /start - Bienvenida enviada a {chat_id}", "OUTPUT")

    # --- Comando /help: Muestra los comandos disponibles y c√≥mo enviar ejercicios.
    @bot.message_handler(commands=["help"])
    def send_help(message: Message) -> None:
        # Use get_telegram_id instead of get_chat_id - Correct function is used here
        chat_id = get_telegram_id(message)

        if not check_whitelist(message, bot):
            return

        help_text = (
            "¬°Yeah buddy! Aqu√≠ van los comandos:\n"
            "/toca - Ver qu√© ejercicios tocan hoy seg√∫n tu rutina\n"
            "/rutina - Configurar tu rutina semanal\n"
            "/logs  - Consulta los ejercicios de los √∫ltimos 7 d√≠as (por defecto).\n"
            "/logsX - Consulta los ejercicios de los √∫ltimos X d√≠as. Ejemplo: /logs1, /logs2, /logs3, ...\n"
            "/ai - Consulta a tu entrenador personal AI. Ejemplo: /ai ¬øC√≥mo mejorar mi press de banca?\n"
            "/vincular - Vincular tu cuenta de Telegram con tu cuenta web\n"
            "\n"
            "Tambi√©n puedes hacer preguntas directamente al Entrenador AI simplemente escribiendo tu pregunta normal.\n"
            "\n"
            "Para enviar tus ejercicios, utiliza este formato:\n"
            "Ejemplo: press banca 10x130,7x130,5x130 dominadas 10,9,5\n"
            "¬°Suelta esas series y registra tu grandeza!"
        )
        bot.send_message(chat_id, help_text)
        log_to_console(f"Comando /help - Mostrando ayuda a {chat_id}", "OUTPUT")

    # --- Funci√≥n para procesar el c√≥digo de vinculaci√≥n ---
    def process_link_code(message: Message) -> None:
        # Use get_telegram_id to get the chat_id for sending messages
        chat_id = get_telegram_id(message)
        if not check_whitelist(message, bot):
            return

        code = message.text.strip().upper()
        telegram_id = str(chat_id) # Use the chat_id as the telegram_id for the API call

        # Validar formato del c√≥digo (6 caracteres alfanum√©ricos)
        if not re.match(r"^[A-Z0-9]{6}$", code):
            bot.send_message(
                chat_id,
                "‚ùå El c√≥digo debe ser de 6 caracteres (letras y n√∫meros).\n"
                "Por favor, intenta de nuevo con /vincular",
            )
            return

        # Enviar mensaje de "procesando"
        bot.send_chat_action(chat_id, "typing")

        # Llamar a la API para verificar el c√≥digo
        url = f"{BASE_URL}/api/verify-link-code"
        try:
            # Include the telegram_id in the payload
            payload = {"code": code, "telegram_id": telegram_id}
            # Get headers if needed, assuming ApiClient or similar defines them
            # headers = ApiClient.get_headers() # Example if using an ApiClient class
            headers = {"Content-Type": "application/json"} # Simple header

            response = requests.post(
                url,
                json=payload,
                headers=headers, # Pass headers if required by your API
            )

            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    bot.send_message(
                        chat_id,
                        "‚úÖ *¬°Cuentas vinculadas con √©xito!*\n\n"
                        "Ahora puedes acceder a tus datos desde la web y desde Telegram.\n"
                        "Tus entrenamientos se sincronizar√°n autom√°ticamente entre ambas plataformas.",
                        parse_mode="Markdown",
                    )
                    log_to_console(f"Cuentas vinculadas para Telegram ID {telegram_id}", "SUCCESS")
                else:
                    bot.send_message(
                        chat_id,
                        f"‚ùå Error: {data.get('message', 'C√≥digo inv√°lido o expirado')}.\n"
                        "Por favor, genera un nuevo c√≥digo en la web e int√©ntalo de nuevo con /vincular",
                    )
                    log_to_console(f"Fallo vinculaci√≥n para Telegram ID {telegram_id}: {data.get('message', 'C√≥digo inv√°lido')}", "WARNING")
            else:
                 # Log the status code and response text for debugging
                log_to_console(f"Error en API /verify-link-code: {response.status_code} - {response.text}", "ERROR")
                bot.send_message(
                    chat_id,
                    f"‚ùå Error al verificar el c√≥digo ({response.status_code}). Por favor, intenta nuevamente.",
                )
        except requests.exceptions.RequestException as e: # Catch specific request errors
            bot.send_message(
                chat_id,
                "‚ùå Error de conexi√≥n al verificar el c√≥digo. Por favor, intenta m√°s tarde.",
            )
            log_to_console(f"Error de conexi√≥n en verificaci√≥n de c√≥digo: {str(e)}", "ERROR")
        except Exception as e: # Catch any other unexpected errors
            bot.send_message(
                chat_id,
                "‚ùå Ocurri√≥ un error inesperado. Por favor, intenta m√°s tarde.",
            )
            log_to_console(f"Error inesperado en process_link_code: {str(e)}", "ERROR")


    # Comando /vincular
    @bot.message_handler(commands=["vincular"])
    def link_account_command(message: Message) -> None:
        # Use get_telegram_id to get chat_id
        chat_id = get_telegram_id(message)
        if not check_whitelist(message, bot):
            return

        log_to_console(f"Comando /vincular recibido de usuario {chat_id}", "INPUT")
        bot.send_message(
            chat_id,
            "üîó *Vincular con cuenta web*\n\n"
            "Por favor, env√≠a el c√≥digo de vinculaci√≥n que ves en la web.\n"
            "El c√≥digo debe ser de 6 caracteres (letras y n√∫meros).",
            parse_mode="Markdown",
        )
        # Registrar el siguiente paso para procesar el c√≥digo
        bot.register_next_step_handler(message, process_link_code)