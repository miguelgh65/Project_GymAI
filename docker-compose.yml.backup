services:
  gym-postgres:
    image: postgres:latest
    container_name: gym-postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5438:5432" # Puerto externo:interno
    restart: unless-stopped
    networks:
      - gymnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  gym-fastapi-backend:
    container_name: gym-fastapi-backend
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@gym-postgres:5432/${DB_NAME} # Usa el nombre del servicio 'gym-postgres' y su puerto interno 5432
      - PYTHONPATH=/app
      - TZ=Europe/Madrid
      # --- LÍNEA AÑADIDA ---
      - API_BASE_URL=http://localhost:5050 # Especifica la URL base interna con el puerto correcto
      # ---------------------
      # Otras variables de entorno que necesites (ej. secretos, claves API)
      - SECRET_KEY=${SECRET_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - FITBIT_CLIENT_ID=${FITBIT_CLIENT_ID}
      - FITBIT_CLIENT_SECRET=${FITBIT_CLIENT_SECRET}
      - FITBIT_REDIRECT_URI=${FITBIT_REDIRECT_URI}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION}
    volumes:
      - ./:/app # Monta el código local en el contenedor
      # Si tienes directorios específicos que no deben sobreescribirse, especifícalos:
      # - ./fitness_chatbot:/app/fitness_chatbot
    ports:
      - "5050:5050" # Puerto externo:interno (asegúrate que uvicorn corre en 5050 dentro)
    depends_on:
      gym-postgres:
        condition: service_healthy # Espera a que la BD esté lista
    restart: unless-stopped
    working_dir: /app
    command: sh -c "/app/start.sh" # Script que inicia uvicorn en el puerto 5050
    networks:
      - gymnet
    healthcheck:
      # Verifica que la API responde en el puerto interno 5050
      test: ["CMD-SHELL", "curl -s http://localhost:5050/docs > /dev/null || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s # Tiempo antes de empezar el healthcheck

  gym-react-frontend:
    container_name: gym-react-frontend
    build:
      context: ./front_end_react # Directorio del frontend
      dockerfile: Dockerfile
    ports:
      - "80:80" # Puerto externo:interno (nginx/apache/servidor de desarrollo suele usar 80)
    volumes:
      - ./front_end_react:/app # Monta el código fuente del frontend
      - /app/node_modules # Evita sobreescribir node_modules del contenedor
    environment:
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL} # URL para que el frontend llame al backend (desde el navegador)
      - REACT_APP_PROJECT_NAME=${REACT_APP_PROJECT_NAME}
      - REACT_APP_GOOGLE_CLIENT_ID=${REACT_APP_GOOGLE_CLIENT_ID} # ID de cliente para Google Login
    depends_on:
      - gym-fastapi-backend # Espera a que el backend esté listo (no garantiza que esté completamente funcional)
    restart: unless-stopped
    networks:
      - gymnet

networks:
  gymnet:
    driver: bridge # Red interna para que los contenedores se comuniquen

volumes:
  postgres_data: {} # Volumen persistente para los datos de PostgreSQL